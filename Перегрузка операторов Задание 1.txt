#include <iostream>

class Fraction
{
private:
	int numerator_;
	int denominator_;

public:
	Fraction(int numerator, int denominator)
	{
		numerator_ = numerator;
		denominator_ = denominator;
	}

	
	float result() {
		return static_cast<float>(numerator_) / static_cast<float> (denominator_);
	};

	bool operator==(Fraction& f) {
		if (this->result() == f.result()) {
			return 1;
		}
		else return 0;
	}

	bool operator!=(Fraction& f) {
		if (!(*this == f)) {
			return 1;
		}
		else return 0;
	}

	bool operator< (Fraction & f) {
		if (this->result() < f.result()) {
			return 1;
		}
		else return 0;
	}

	bool operator> (Fraction& f) {
		if (!(*this < f) && !(*this == f)) {
			return 1;
		}
		else return 0;
	}

	bool operator>= (Fraction& f) {
		if (!(*this < f)) {
			return 1;
		}
		else return 0;
	}

	bool operator<= (Fraction& f) {
		if (!(*this > f)) {
			return 1;
		}
		else return 0;
	}
};

int main()
{
	Fraction f1(4, 3);
	Fraction f2(6, 11);

	std::cout << "f1" << ((f1 == f2) ? " == " : " not == ") << "f2" << '\n';
	std::cout << "f1" << ((f1 != f2) ? " != " : " not != ") << "f2" << '\n';
	std::cout << "f1" << ((f1 < f2) ? " < " : " not < ") << "f2" << '\n';
	std::cout << "f1" << ((f1 > f2) ? " > " : " not > ") << "f2" << '\n';
	std::cout << "f1" << ((f1 <= f2) ? " <= " : " not <= ") << "f2" << '\n';
	std::cout << "f1" << ((f1 >= f2) ? " >= " : " not >= ") << "f2" << '\n';
	return 0;
}